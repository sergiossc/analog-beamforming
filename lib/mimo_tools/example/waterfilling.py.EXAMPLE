"""
Water-filling power allocation
"""
import numpy as np

class channel():
    def __init__(self, id, eigenvalue, noise_var, power):
        self.id = id
        self.eigenvalue = eigenvalue
        self.noise_var = noise_var
        self.power = power
        self.enable = False


def waterfilling(channels, total_pwr):
    """
       Power allocation using water-filling.:
         Parameters:
          eigenvalues: array-like eigenvalues of each channel
          noise_var: array-like varieance of each channel. Same dimension os eigenvalues array.
         Return:
          power_allocation: array-like with values of power allocation to each channel.
    """
    wf_list = []

    for ch in channels:
        wf_rec = {"ch": ch, "noise_lambda": 0.0}
        wf_list.append(wf_rec)

    for wf in wf_list:
        ch = wf["ch"]
        #print("allocation pwr to channel ", ch.id)
        wf["noise_lambda"] = ch.noise_var/ch.eigenvalue
        text = 'Channel ' +str(ch.id) + ' noise_lambda: ' + str(wf["noise_lambda"]) 
        #print("noise_lambda: ", wf["noise_lambda"])
        print(text)


    previous_cut_factor = -100
    cut_factor = 0

#    for i in range(100):
    iteration = 1
    while True:
        print("Iteration: ", iteration)
        iteration = iteration + 1
        # primeira passagem pra setar o noise_lambda	
                # Uma lista de registro de canais com ainda desabilitados        
        wf_list_disable =  [ w for w in wf_list if w["ch"].enable == False]

        previous_cut_factor = cut_factor
        # depois de setar o noise_lambda, calcula o fator de corte (nu)
        cut_factor = (  total_pwr + np.sum( [ wf["noise_lambda"] for wf in wf_list if wf["ch"].enable == False] )   ) / len (  wf_list_disable  ) 
        #cut_factor = (  total_pwr + np.sum( [ wf["noise_lambda"] for wf in wf_list if wf["ch"].enable == False] )   ) / len (  [ wf["noise_lambda"] for wf in wf_list if wf["ch"].enable == False]  ) 
        text = 'Current cut factor is ' + str(cut_factor)
        print (text)

        # pra cada canal, avalia se o noise_lambda esta acima do nivel de corte, nesse caso este canal recebe a alocação de potencia 0
        #for wf in wf_list:
        for wf in wf_list_disable:
            ch = wf["ch"]
            if wf["noise_lambda"] >= cut_factor:
                ch.enable = True
                ch.power = 0.0
                text = 'Channel ' + str(ch.id) + ' is a zero power channel (noise/lambda is greater than cut factor)'
                print(text)

        # Uma vez decidido quais canais devem receber potencia, eh hora de alocar as devidas potencias a cada um deles
        if cut_factor == previous_cut_factor:
            print("There is no more zero power channels, and now we need find the power of remaining channels")
            for wf in wf_list_disable:
                ch = wf["ch"]
                ch.power = cut_factor - wf["noise_lambda"]
                ch.enable = True
                text = 'Giving ' + str(ch.power) + ' to Channel ' + str(ch.id)
                print(text)
            break
    return channels 

#
channels = []

ch1 = channel(1, 3.2, 0.013, -100.0)
ch2 = channel(2, 1.2, 0.23, -100.0)
ch3 = channel(3, 0.44,0.4, -100.0)
ch4 = channel(4, 1.24,0.002, -100.0)
ch5 = channel(5, 1.24,0.122, -100.0)

channels.append(ch1)
channels.append(ch2)
channels.append(ch3)
channels.append(ch4)
channels.append(ch5)

print("CHANNEL SETUP:")
for ch in channels:
    text = 'Channel: ' + str(ch.id) + '; autovalor: ' + str(ch.eigenvalue) + '; noise: ' + str(ch.noise_var) + '; power: ' + str(ch.power)
    print (text)

total_pwr = 1
text = 'Power on Tx is ' + str(total_pwr) + ' W'
print(text)

print("STARTING WATER-FILLING ALGORITHM:")
waterfilling(channels, total_pwr)

print("FINAL REPORT:")
p_max = 0
for ch in channels:
    rep = 'ch.id: ' + str(ch.id) + ' ---> pwr: ' + str(ch.power)
    p_max = p_max + ch.power
    print(rep)


print("The sum of allocated powers is ", p_max)
